"use strict";(self.webpackChunkmylar_3_website=self.webpackChunkmylar_3_website||[]).push([[9507],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),m=p(n),f=i,g=m["".concat(c,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(g,s(s({ref:t},l),{},{components:n})):r.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[m]="string"==typeof e?e:i,s[1]=a;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2506:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={},s="[API] seriesjsonListing",a={unversionedId:"api/seriesjsonlisting",id:"api/seriesjsonlisting",title:"[API] seriesjsonListing",description:"action:  A listing of all series containing a series.json file.",source:"@site/docs/api/seriesjsonlisting.md",sourceDirName:"api",slug:"/api/seriesjsonlisting",permalink:"/docs/api/seriesjsonlisting",draft:!1,editUrl:"https://github.com/${organizationName}/${projectName}/tree/main/docs/api/seriesjsonlisting.md",tags:[],version:"current",frontMatter:{}},c={},p=[],l={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"api-seriesjsonlisting"},"[API]"," seriesjsonListing"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"action"),":  A listing of all series containing a series.json file."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"restrictions"),": argument provided will restrict the data-set."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"arguments allowed")," :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"missing"),"-> will perform ",(0,i.kt)("em",{parentName:"li"},"action")," on all series that do not currently have a series.json file.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"response Type"),": json"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"response Schema"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n "$schema": "https://json-schema.org/draft/2020-12/schema",\n "title": "seriesjsonListing",\n "type": "object",\n "properties": {\n   "success": {\n     "type": "boolean",\n     "description": "success status of API job."\n   },\n   "data: {\n     "type": "object",\n     "properties": {\n       "ComicID": {\n         "type": "string",\n         "description": "the comicid of the series."\n       },\n       "ComicLocation": {\n         "type": "string",\n         "description": "the folder path to the specific series."\n       },\n   },\n },\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"example call"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:8090/api?cmd=seriesjsonListing&apikey=<apikey>")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"example response"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-JSON"},'{\n "success": true, \n "data": [\n   {\n     "ComicID": "3727", \n     "ComicLocation": "/comics/Superhero_Name-(2012)"\n   },\n   {\n     "ComicID": "63681",\n     "ComicLocation": "/comics/Bigger_Supehero_Name-(2013)"\n   },\n   {\n     "ComicID": "83922",\n     "ComicLocation": "/Comics/Shorty-(2012)"\n   },\n   {\n     "ComicID": "37781",\n     "ComicLocation": "/Comics/Faith-(2021)"\n   }\n ]\n}\n')))}u.isMDXComponent=!0}}]);