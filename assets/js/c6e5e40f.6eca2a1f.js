"use strict";(self.webpackChunkmylar_3_website=self.webpackChunkmylar_3_website||[]).push([[1662],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(r),f=a,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||i;return r?n.createElement(d,s(s({ref:t},c),{},{components:r})):n.createElement(d,s({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7367:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={},s="[API] refreshSeriesjson",o={unversionedId:"api/refreshseriesjson",id:"api/refreshseriesjson",title:"[API] refreshSeriesjson",description:"action:  refresh / create the series.json files in a threaded background job.",source:"@site/docs/api/refreshseriesjson.md",sourceDirName:"api",slug:"/api/refreshseriesjson",permalink:"/docs/api/refreshseriesjson",draft:!1,editUrl:"https://github.com/${organizationName}/${projectName}/tree/main/docs/api/refreshseriesjson.md",tags:[],version:"current",frontMatter:{}},l={},p=[],c={toc:p},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-refreshseriesjson"},"[API]"," refreshSeriesjson"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"action"),":  refresh / create the series.json files in a threaded background job."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"restrictions"),": argument provided will restrict the data-set."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"arguments allowed")," ",(0,a.kt)("em",{parentName:"p"},"(only one may be chosen)"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"will accept values in a ",(0,a.kt)("em",{parentName:"li"},"list")," format, or a specific ",(0,a.kt)("em",{parentName:"li"},"comicid")),(0,a.kt)("li",{parentName:"ul"},"will also accept specific value of:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"missing"),"-> will perform ",(0,a.kt)("em",{parentName:"li"},"action")," on all series that do not currently have a series.json file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"all")," --\x3e will perform ",(0,a.kt)("em",{parentName:"li"},"action")," on all series in the watchlist."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"refresh-missing")," --\x3e as per the ",(0,a.kt)("inlineCode",{parentName:"li"},"missing")," value, but will refresh each series in order to make sure data is current.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"response Type"),": json"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"response"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"As per [","[seriesjsonListing]","] API endpoint, with ",(0,a.kt)("em",{parentName:"li"},"missing")," either enabled or not depending on the value of ",(0,a.kt)("em",{parentName:"li"},"refresh_missing")),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"success")," field in response json is the success of the seriesjsonListing endpoint, since the background job is threaded.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"example call"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:8090/api?cmd=refreshSeriesjson&comicid=missing&apikey=<apikey>")))}u.isMDXComponent=!0}}]);